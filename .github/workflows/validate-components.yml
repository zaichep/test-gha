# Validate components when creating a Pull Request.
# See README.md for all supported parameters.

name: Validate Components

on:
  pull_request:
    branches:
      - master
    types: [opened, edited, synchronize]

env:
  PR_NUMBER: ${{ github.event.pull_request.number }}
  JFROG_API_KEY: ${{ secrets.JFROG_API_KEY }}

jobs:

  # Inititlize parameters ################################################
  init:
    outputs:
      # List of tenants separated by spaces
      tenants: ${{ steps.params.outputs.tenants }}
      # Matrix in JSON format for deploy-helm-chart job
      #  chart: [...]
      #  environment: [dev]
      #  location: [westus2]
      #  tenant: [...]
      deploy-helm-chart-matrix: ${{ steps.params.outputs.deploy-helm-chart-matrix }}
      # The deploy-helm-chart job is enabled
      deploy-helm-chart-enabled: '${{ steps.params.outputs.deploy-helm-chart-enabled }}'
      # Matrix in JSON format for destroy-helm-chart job
      #  chart: [...]
      #  environment: [dev]
      #  location: [westus2]
      #  tenant: [...]
      destroy-helm-chart-matrix: ${{ steps.params.outputs.destroy-helm-chart-matrix }}
      # The destroy-helm-chart job is enabled
      destroy-helm-chart-enabled: '${{ steps.params.outputs.destroy-helm-chart-enabled }}'
      # Matrix in JSON format for terraform job
      #  environment: [dev]
      #  location: [westus2]
      terraform-matrix: ${{ steps.params.outputs.terraform-matrix }}

    runs-on: ubuntu-latest

    steps:
      - name: Clean Workspace
        uses: AutoModality/action-clean@d004b47eb728f2a83316fc70ba9a62ef97278013 # v1.1.0
      - name: Clean up Runner
        run: |
          rm -f ~/.ssh/*
          rm -f ~/.gitconfig
        continue-on-error: true

      - name: Checkout repository
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f # v2.3.4

      - name: Get Parameters
        id: params
        run: |
          prtitle="${{ github.event.pull_request.title }}"
          # environments=("${{steps.prtitle.outputs.environment}}")
          # locations=("${{steps.prtitle.outputs.location}}")
          # tenants=(${{steps.prtitle.outputs.tenants}})
          environments=(dev)
          locations=(westus2 eastus2)
          tenants=(000---BULK)
          if [[ ${#environments[@]} -eq 0 ]]; then
            environments=(dev)
          fi
          if [[ ${#locations[@]} -eq 0 ]]; then
            locations=(westus2 eastus2)
          fi
          deploy_charts_matrix_enabled=false
          destroy_charts_matrix_enabled=false
          charts_matrix_includes=()
          all_charts=($(find ${GITHUB_WORKSPACE}/helm -maxdepth 1 -mindepth 1 -type d -not -name common -printf '%f\n'))
          for chart in "${all_charts[@]}"; do
            shared=false
            case "${chart}" in
            init)
              if [[ ${prtitle} == *"deploy-init:"* ]]; then
                deploy_charts_matrix_enabled=true
              else
                continue
              fi
              shared=true
              ;;
            pulse|monitor)
              if [[ ${prtitle} == *"deploy-shared:"* ]]; then
                deploy_charts_matrix_enabled=true
              elif [[ ${prtitle} == *"destroy-shared:"* ]]; then
                destroy_charts_matrix_enabled=true
              else
                continue
              fi
              shared=true
              ;;
            pulse-manage-agents)
              if [[ ${prtitle} == *"deploy-advance:"* ]]; then
                deploy_charts_matrix_enabled=true
              elif [[ ${prtitle} == *"destroy-advance:"* ]]; then
                destroy_charts_matrix_enabled=true
              else
                continue
              fi
              shared=true
              ;;
            *)
              if [[ ${prtitle} == *"deploy:"* ]]; then
                deploy_charts_matrix_enabled=true
              elif [[ ${prtitle} == *"destroy:"* ]]; then
                destroy_charts_matrix_enabled=true
              else
                continue
              fi
              ;;
            esac
            for environment in "${environments[@]}"; do
              for location in "${locations[@]}"; do
                if ${shared}; then
                  charts_matrix_includes+=(
                    "{\"chart\":\"${chart}\",\"environment\":\"${environment}\",\"location\":\"${location}\",\"tenant\":\"shared\"}"
                  )
                  continue
                fi
                tenant_dir=helmvalues/${chart}/azure/${environment}/${location}
                for tenant in "${tenants[@]}"; do
                  sid="${tenant%---*}"
                  if [[ "${tenant}" == "000---BULK" ]]; then
                    for dir in $(ls ${tenant_dir}); do
                      if [[ -f "${tenant_dir}/${dir}/values.yaml" ]]; then
                        charts_matrix_includes+=(
                          "{\"chart\":\"${chart}\",\"environment\":\"${environment}\",\"location\":\"${location}\",\"tenant\":\"${dir}\"}"
                        )
                      fi
                    done
                  elif [[ -f "${tenant_dir}/${sid}/values.yaml" ]]; then
                    charts_matrix_includes+=(
                      "{\"chart\":\"${chart}\",\"environment\":\"${environment}\",\"location\":\"${location}\",\"tenant\":\"${tenant}\"}"
                    )
                  fi
                done
              done
            done
          done
          if ${deploy_charts_matrix_enabled} && ${destroy_charts_matrix_enabled}; then
            echo "ERROR: deploy and destroy are exclusive."
            exit 1
          fi
          charts_matrix_includes_json=$(printf '%s,' "${charts_matrix_includes[@]}" | sed 's/^/[/;s/,$/]/')
          deploy_charts_matrix_includes_json="[]"
          destroy_charts_matrix_includes_json="[]"
          if ${deploy_charts_matrix_enabled}; then
            [[ ${#charts_matrix_includes[@]} -eq 0 ]] && deploy_charts_matrix_enabled=false
            deploy_charts_matrix_includes_json="${charts_matrix_includes_json}"
          elif ${destroy_charts_matrix_enabled}; then
            [[ ${#charts_matrix_includes[@]} -eq 0 ]] && destroy_charts_matrix_enabled=false
            destroy_charts_matrix_includes_json="${charts_matrix_includes_json}"
          fi
          environments_json=$(printf '"%s",' "${environments[@]}" | sed 's/^/[/;s/,$/]/')
          locations_json=$(printf '"%s",' "${locations[@]}" | sed 's/^/[/;s/,$/]/')
          set -x
          echo "::set-output name=tenants::${tenants[*]}"
          echo "::set-output name=deploy-helm-chart-matrix::{\"include\":${deploy_charts_matrix_includes_json}}"
          echo "::set-output name=deploy-helm-chart-enabled::${deploy_charts_matrix_enabled}"
          echo "::set-output name=destroy-helm-chart-matrix::{\"include\":${destroy_charts_matrix_includes_json}}"
          echo "::set-output name=destroy-helm-chart-enabled::${destroy_charts_matrix_enabled}"
          echo "::set-output name=terraform-matrix::{\"environment\":${environments_json},\"location\":${locations_json}}"

  deploy-helm-chart:
    needs: [ init ]
    if: "needs.init.outputs.deploy-helm-chart-enabled == 'true'
      && !contains(needs.*.result, 'failure')"
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.deploy-helm-chart-matrix) }}
      fail-fast: false

    runs-on: ubuntu-latest

    steps:
      - name: Get Info
        id: chart-info
        run: |
          true

  destroy-helm-chart:
    needs: [ init ]
    if: "needs.init.outputs.destroy-helm-chart-enabled == 'true'
      && !contains(needs.*.result, 'failure')"
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.destroy-helm-chart-matrix) }}
      fail-fast: false

    runs-on: ubuntu-latest

    steps:
      - name: Get Info
        id: chart-info
        run: |
          true
