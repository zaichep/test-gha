name: Deploy

on:
  repository_dispatch:
    types: [ test, test-fail, test-skip ]

jobs:
  init:
    if: github.event.action != 'test-skip'
    outputs:
      instructions: ${{ steps.params.outputs.instructions }}
      deployment-code: ${{ steps.params.outputs.deployment-code }}
      components: ${{ steps.params.outputs.components }}
      matrix: ${{ steps.params.outputs.matrix }}

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Main
        run: |
          [[ "${{ github.event.action }}" != "test-fail" ]]

      - name: Get Parameters
        id: params
        run: |
          comps=${{ toJSON(github.event.client_payload.components) }}
          [[ "$comps" == "null" ]] && comps="1 2"
          matrix=
          for c in $comps; do
            [[ -n $matrix ]] && matrix="$matrix, "
            matrix="$matrix\"$c\""
          done
          matrix="{\"component\":[$matrix]}"
          set -x
          echo "::set-output name=instructions::deploy ${{ github.event.client_payload.instructions }}"
          echo "::set-output name=deployment-code::${{ github.event.client_payload.deployment-code }}"
          echo "::set-output name=components::$comps"
          echo "::set-output name=matrix::$matrix"

  job-0:
    needs: [ init ]
    if: github.event.action != 'test-skip'

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Main
        run: |
          [[ "${{ github.event.action }}" != "test-fail" ]]

      - name: Show Parameters
        run: |
          echo "instructions: ${{ needs.init.outputs.instructions }}"
          echo "deployment-code: ${{ needs.init.outputs.deployment-code }}"
          echo "components: ${{ needs.init.outputs.components }}"
          echo "matrix: ${{ needs.init.outputs.matrix }}"

  end:
    needs: [ init, job-0, job-1, job-2 ]
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: Main
        run: |
          [[ "${{ contains(needs.*.result, 'failure') }}" == "false" ]]

  job-1:
    needs: [ init, job-0 ]
    if: "!contains(needs.*.result, 'failure')"
    strategy:
      matrix:
        ${{ fromJSON(needs.init.outputs.matrix) }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Check Changes
        id: modified
        uses: actions/cache@v2
        with:
          path: |
            job-${{ matrix.component }}.lock
          key: ${{ runner.os }}-job${{ matrix.component }}-${{ hashFiles('job-' & matrix.component) }}

      - name: Main
        if: steps.modified.outputs.cache-hit != 'true'
        run: |
          echo '${{ toJSON(steps.modified.outputs) }}'
          ls -al
          touch job-${{ matrix.component }}.lock

  job-2:
    needs: [ init, job-0 ]
    if: "!contains(needs.*.result, 'failure')"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Check Changes
        id: modified
        uses: actions/cache@v2
        with:
          path: |
            job-2.lock
          key: ${{ runner.os }}-job2-${{ hashFiles('job-2') }}

      - name: Main
        if: steps.modified.outputs.cache-hit != 'true'
        run: |
          ls -al
          touch job-2.lock
